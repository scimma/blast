from django.db import migrations


def load_acknowledgement(apps, schema_editor):
    Acknowledgement = apps.get_model("host", "Acknowledgement")
    for obj in [
        Acknowledgement(
            name='Astropy',
            description='Used in almost all aspects of the project',
            repository_url='https://github.com/astropy/astropy',
            website_url='https://www.astropy.org',
            paper_url='https://ui.adsabs.harvard.edu/abs/2018AJ....156..123A/abstract',
            doi='10.3847/1538-3881/aabc4f',
            acknowledgement_text='This research made use of Astropy, (http://www.astropy.org) a community-developed core Python package for Astronomy.',
        ),
        Acknowledgement(
            name='NumPy',
            description='Used in almost all aspects of the project',
            repository_url='https://github.com/numpy/numpy',
            website_url='https://numpy.org',
            paper_url='https://ui.adsabs.harvard.edu/abs/2020Natur.585..357H/abstract',
            doi='10.1038/s41586-020-2649-2',
        ),
        Acknowledgement(
            name='GHOST',
            description='Used to match transients to host galaxies',
            repository_url='https://github.com/uiucsn/astro_ghost',
            website_url='https://ghost.ncsa.illinois.edu',
            paper_url='https://ui.adsabs.harvard.edu/abs/2021ApJ...908..170G/abstract',
            doi='10.3847/1538-4357/abd02b',
        ),
        Acknowledgement(
            name='photutils',
            description='Used for the host aperture photometry',
            repository_url='https://github.com/astropy/photutils',
            website_url='https://photutils.readthedocs.io/en/stable/',
            paper_url='https://ui.adsabs.harvard.edu/abs/2022zndo....596036B/abstract',
            doi='10.5281/zenodo.6385735',
            acknowledgement_text='This research made use of Photutils, an Astropy package for detection and photometry of astronomical sources (Bradley et al. 2020).',
        ),
        Acknowledgement(
            name='Astroquery',
            description='Used for gathering external data for transients',
            repository_url='https://github.com/astropy/astroquery',
            website_url='https://astroquery.readthedocs.io/en/latest/',
            paper_url='https://ui.adsabs.harvard.edu/abs/2019AJ....157...98G/abstract',
            doi='10.3847/1538-3881/aafc33',
        ),
        Acknowledgement(
            name='HiPS',
            description='Used in the cutout generation',
            repository_url='https://github.com/hipspy/hips',
            website_url='https://hips.readthedocs.io',
            paper_url='https://ui.adsabs.harvard.edu/abs/2015A%26A...578A.114F/abstract',
            doi='10.1051/0004-6361/201526075',
            acknowledgement_text='The HiOS package is being developed as part of Google Summer of Code 2017 program by Adeel Ahmad, with Thomas Boch (CDS, Strasbourg) and Christoph Deil (MPIK, Heidelberg) as mentors. We would like to thank Google, CDS, MPIK for their support!',
        ),
        Acknowledgement(
            name='dynesty',
            description='Used in the inference of host galaxy parameters',
            repository_url='https://github.com/joshspeagle/dynesty',
            website_url='https://dynesty.readthedocs.io/en/latest/',
            paper_url='https://ui.adsabs.harvard.edu/abs/2020MNRAS.493.3132S/abstract',
            doi='10.1093/mnras/staa278',
        ),
        Acknowledgement(
            name='Prospector',
            description='Used in the inference of host galaxy parameters',
            repository_url='https://github.com/bd-j/prospector',
            website_url='https://prospect.readthedocs.io/en/latest/',
            paper_url='https://ui.adsabs.harvard.edu/abs/2021ApJS..254...22J/abstract',
            doi='10.3847/1538-4365/abef67',
        ),
        Acknowledgement(
            name='sedpy',
            description='Used in the inference of host galaxy parameters',
            repository_url='https://github.com/bd-j/sedpy',
            website_url='https://ui.adsabs.harvard.edu/abs/2019ascl.soft05026J/abstract',
            paper_url='https://pypi.org/project/sedpy/',
            doi='10.5281/zenodo.4582723',
        ),
        Acknowledgement(
            name='SVO Filter Profile Service',
            description='Used in the inference of host galaxy parameters',
            repository_url='https://github.com/hover2pi/svo_filters',
            website_url='https://svo.cab.inta-csic.es/main/index.php',
            paper_url='https://ui.adsabs.harvard.edu/abs/2020sea..confE.182R/abstract',
            doi='10.5479/ADS/bib/2012ivoa.rept.1015R',
        ),
        Acknowledgement(
            name='Python FSPS',
            description='Used to generate spectra and magnitude for arbitrary stellar populations',
            repository_url='https://github.com/dfm/python-fsps/tree/v0.4.1rc1',
            website_url='https://dfm.io/python-fsps/current/',
            paper_url='https://ui.adsabs.harvard.edu/abs/2014zndo.....12157F/abstract',
            doi='10.5281/zenodo.4737461',
        ),
        Acknowledgement(
            name='SBI',
            description='Used in the inference of host galaxy parameters',
            repository_url='https://github.com/sbi-dev/sbi',
            website_url='https://sbi-dev.github.io/sbi/latest/',
            paper_url='https://joss.theoj.org/papers/10.21105/joss.02505',
            doi='10.21105/joss.02505',
        ),
        Acknowledgement(
            name='SBI++',
            description='Used in the inference of host galaxy parameters',
            repository_url='https://github.com/wangbingjie/sbi_pp',
            website_url='https://github.com/wangbingjie/sbi_pp',
            paper_url='https://iopscience.iop.org/article/10.3847/2041-8213/ace361',
            doi='10.3847/2041-8213/ace361',
        ),
    ]:
        obj.save()


def load_catalog(apps, schema_editor):
    Catalog = apps.get_model("host", "Catalog")
    Survey = apps.get_model("host", "Survey")
    for obj in [
        Catalog(
            name='2MASS_extended_source',
            survey=Survey.objects.get(name__exact='2MASS'),
            vizier_id='VII/233',
            id_column='2MASX',
            ra_column='RAJ2000',
            dec_column='DEJ2000',
        ),
        Catalog(
            name='ALLWISE',
            survey=Survey.objects.get(name__exact='WISE'),
            vizier_id='II/328',
            id_column='AllWISE',
            ra_column='RAJ2000',
            dec_column='DEJ2000',
        ),
        Catalog(
            name='GALEX_source',
            survey=Survey.objects.get(name__exact='GALEX'),
            vizier_id='II/335/galex_ais',
            id_column='objid',
            ra_column='RAJ2000',
            dec_column='DEJ2000',
        ),
        Catalog(
            name='PanSTARRS_DR2',
            survey=Survey.objects.get(name__exact='PanSTARRS'),
            vizier_id='II/349',
            id_column='objID',
            ra_column='RAJ2000',
            dec_column='DEJ2000',
        ),
        Catalog(
            name='SDSS_DR17',
            survey=Survey.objects.get(name__exact='SDSS'),
            vizier_id='V/147',
            id_column='objID',
            ra_column='RA_ICRS',
            dec_column='RA_ICRS',
        ),
        Catalog(
            name='DES_DR1',
            survey=Survey.objects.get(name__exact='DES'),
            vizier_id='II/357',
            id_column='DES',
            ra_column='RAJ2000',
            dec_column='RAJ2000',
        ),
    ]:
        obj.save()


def load_catalogphotometry(apps, schema_editor):
    Catalog = apps.get_model("host", "Catalog")
    CatalogPhotometry = apps.get_model("host", "CatalogPhotometry")
    Filter = apps.get_model("host", "Filter")
    for obj in [
        CatalogPhotometry(
            name='2MASS_H_extended_source_K20',
            filter=Filter.objects.get(name__exact='2MASS_H'),
            catalog=Catalog.objects.get(name__exact='2MASS_extended_source'),
            mag_column='H.K20e',
            mag_error_column='e_H.K20e',
        ),
        CatalogPhotometry(
            name='2MASS_J_extended_source_K20',
            filter=Filter.objects.get(name__exact='2MASS_J'),
            catalog=Catalog.objects.get(name__exact='2MASS_extended_source'),
            mag_column='J.K20e',
            mag_error_column='e_J.K20e',
        ),
        CatalogPhotometry(
            name='2MASS_K_extended_source_K20',
            filter=Filter.objects.get(name__exact='2MASS_K'),
            catalog=Catalog.objects.get(name__exact='2MASS_extended_source'),
            mag_column='K.K20e',
            mag_error_column='e_K.K20e',
        ),
        CatalogPhotometry(
            name='WISE_W1_ALLWISE_APER',
            filter=Filter.objects.get(name__exact='WISE_W1'),
            catalog=Catalog.objects.get(name__exact='ALLWISE'),
            mag_column='W1mag',
            mag_error_column='e_W1mag',
        ),
        CatalogPhotometry(
            name='WISE_W2_ALLWISE_APER',
            filter=Filter.objects.get(name__exact='WISE_W2'),
            catalog=Catalog.objects.get(name__exact='ALLWISE'),
            mag_column='W2mag',
            mag_error_column='e_W2mag',
        ),
        CatalogPhotometry(
            name='WISE_W3_ALLWISE_APER',
            filter=Filter.objects.get(name__exact='WISE_W3'),
            catalog=Catalog.objects.get(name__exact='ALLWISE'),
            mag_column='W3mag',
            mag_error_column='e_W3mag',
        ),
        CatalogPhotometry(
            name='WISE_W4_ALLWISE_APER',
            filter=Filter.objects.get(name__exact='WISE_W4'),
            catalog=Catalog.objects.get(name__exact='ALLWISE'),
            mag_column='W4mag',
            mag_error_column='e_W4mag',
        ),
        CatalogPhotometry(
            name='GALEX_NUV_source_APER',
            filter=Filter.objects.get(name__exact='GALEX_NUV'),
            catalog=Catalog.objects.get(name__exact='GALEX_source'),
            mag_column='NUV.a',
            mag_error_column='e_NUV.a',
        ),
        CatalogPhotometry(
            name='GALEX_FUV_source_APER',
            filter=Filter.objects.get(name__exact='GALEX_FUV'),
            catalog=Catalog.objects.get(name__exact='GALEX_source'),
            mag_column='FUV.a',
            mag_error_column='e_FUV.a',
        ),
        CatalogPhotometry(
            name='PanSTARRS_g_DR2_KRON',
            filter=Filter.objects.get(name__exact='PanSTARRS_g'),
            catalog=Catalog.objects.get(name__exact='PanSTARRS_DR2'),
            mag_column='gKmag',
            mag_error_column='e_gKmag',
        ),
        CatalogPhotometry(
            name='PanSTARRS_r_DR2_KRON',
            filter=Filter.objects.get(name__exact='PanSTARRS_r'),
            catalog=Catalog.objects.get(name__exact='PanSTARRS_DR2'),
            mag_column='rKmag',
            mag_error_column='e_rKmag',
        ),
        CatalogPhotometry(
            name='PanSTARRS_i_DR2_KRON',
            filter=Filter.objects.get(name__exact='PanSTARRS_i'),
            catalog=Catalog.objects.get(name__exact='PanSTARRS_DR2'),
            mag_column='iKmag',
            mag_error_column='e_iKmag',
        ),
        CatalogPhotometry(
            name='PanSTARRS_z_DR2_KRON',
            filter=Filter.objects.get(name__exact='PanSTARRS_z'),
            catalog=Catalog.objects.get(name__exact='PanSTARRS_DR2'),
            mag_column='zKmag',
            mag_error_column='e_zKmag',
        ),
        CatalogPhotometry(
            name='PanSTARRS_y_DR1_KRON',
            filter=Filter.objects.get(name__exact='PanSTARRS_y'),
            catalog=Catalog.objects.get(name__exact='PanSTARRS_DR2'),
            mag_column='yKmag',
            mag_error_column='e_yKmag',
        ),
        CatalogPhotometry(
            name='SDSS_u_DR17_P',
            filter=Filter.objects.get(name__exact='SDSS_u'),
            catalog=Catalog.objects.get(name__exact='SDSS_DR17'),
            mag_column='uPmag',
            mag_error_column='e_uPmag',
        ),
        CatalogPhotometry(
            name='SDSS_g_DR17_P',
            filter=Filter.objects.get(name__exact='SDSS_g'),
            catalog=Catalog.objects.get(name__exact='SDSS_DR17'),
            mag_column='gPmag',
            mag_error_column='e_gPmag',
        ),
        CatalogPhotometry(
            name='SDSS_r_DR17_P',
            filter=Filter.objects.get(name__exact='SDSS_r'),
            catalog=Catalog.objects.get(name__exact='SDSS_DR17'),
            mag_column='rPmag',
            mag_error_column='e_rPmag',
        ),
        CatalogPhotometry(
            name='SDSS_z_DR17_P',
            filter=Filter.objects.get(name__exact='SDSS_z'),
            catalog=Catalog.objects.get(name__exact='SDSS_DR17'),
            mag_column='zPmag',
            mag_error_column='e_zPmag',
        ),
        CatalogPhotometry(
            name='SDSS_i_DR17_P',
            filter=Filter.objects.get(name__exact='SDSS_i'),
            catalog=Catalog.objects.get(name__exact='SDSS_DR17'),
            mag_column='iPmag',
            mag_error_column='e_iPmag',
        ),
        CatalogPhotometry(
            name='DES_g_DR1_APER',
            filter=Filter.objects.get(name__exact='DES_g'),
            catalog=Catalog.objects.get(name__exact='DES_DR1'),
            mag_column='gmag',
            mag_error_column='e_gmag',
        ),
        CatalogPhotometry(
            name='DES_r_DR1_APER',
            filter=Filter.objects.get(name__exact='DES_r'),
            catalog=Catalog.objects.get(name__exact='DES_DR1'),
            mag_column='rmag',
            mag_error_column='e_rmag',
        ),
        CatalogPhotometry(
            name='DES_i_DR1_APER',
            filter=Filter.objects.get(name__exact='DES_i'),
            catalog=Catalog.objects.get(name__exact='DES_DR1'),
            mag_column='imag',
            mag_error_column='e_imag',
        ),
        CatalogPhotometry(
            name='DES_z_DR1_APER',
            filter=Filter.objects.get(name__exact='DES_z'),
            catalog=Catalog.objects.get(name__exact='DES_DR1'),
            mag_column='zmag',
            mag_error_column='e_zmag',
        ),
        CatalogPhotometry(
            name='DES_y_DR1_APER',
            filter=Filter.objects.get(name__exact='DES_Y'),
            catalog=Catalog.objects.get(name__exact='DES_DR1'),
            mag_column='ymag',
            mag_error_column='e_ymag',
        ),
    ]:
        obj.save()


def load_tasks(apps, schema_editor):
    Task = apps.get_model("host", "Task")
    for name in [
        'Host match',
        'Cutout download',
        'Global aperture construction',
        'Local aperture photometry',
        'Global aperture photometry',
        'Validate local photometry',
        'Validate global photometry',
        'Host information',
        'Global host SED inference',
        'Local host SED inference',
        'Transient information',
        'Transient MWEBV',
        'Host MWEBV',
        'Log transient processing status',
    ]:
        Task(name=name).save()


def load_filter(apps, schema_editor):
    Filter = apps.get_model("host", "Filter")
    Survey = apps.get_model("host", "Survey")
    for obj in [
        Filter(
            name='2MASS_H',
            survey=Survey.objects.get(name__exact='2MASS'),
            sedpy_id='twomass_H',
            hips_id='CDS/P/2MASS/H',
            pixel_size_arcsec=1.0,
            image_fwhm_arcsec=2.8,
            vosa_id='2MASS/2MASS.H',
            image_download_method='custom',
            wavelength_eff_angstrom=16620.0,
            wavelength_min_angstrom=14787.38,
            wavelength_max_angstrom=18231.02,
            vega_zero_point_jansky=1024.0,
            ab_offset=1.3676,
            magnitude_zero_point_keyword='MAGZP',
            image_pixel_units='counts',
            kcorrect_name='twomass_H',
        ),
        Filter(
            name='2MASS_J',
            survey=Survey.objects.get(name__exact='2MASS'),
            sedpy_id='twomass_j',
            hips_id='CDS/P/2MASS/J',
            pixel_size_arcsec=1.0,
            image_fwhm_arcsec=2.9,
            vosa_id='2MASS/2MASS.J',
            image_download_method='custom',
            wavelength_eff_angstrom=12350.0,
            wavelength_min_angstrom=10806.47,
            wavelength_max_angstrom=14067.97,
            vega_zero_point_jansky=1594.0,
            ab_offset=0.8949,
            magnitude_zero_point_keyword='MAGZP',
            image_pixel_units='counts',
            kcorrect_name='twomass_J',
        ),
        Filter(
            name='2MASS_K',
            survey=Survey.objects.get(name__exact='2MASS'),
            sedpy_id='twomass_k',
            hips_id='CDS/P/2MASS/K',
            pixel_size_arcsec=1.0,
            image_fwhm_arcsec=2.9,
            vosa_id='2MASS/2MASS.Ks',
            image_download_method='custom',
            wavelength_eff_angstrom=21590.0,
            wavelength_min_angstrom=19543.69,
            wavelength_max_angstrom=23552.4,
            vega_zero_point_jansky=666.8,
            ab_offset=1.8378,
            magnitude_zero_point_keyword='MAGZP',
            image_pixel_units='counts',
            kcorrect_name='twomass_Ks',
        ),
        Filter(
            name='WISE_W1',
            survey=Survey.objects.get(name__exact='WISE'),
            sedpy_id='wise_w1',
            hips_id='CDS/P/allWISE/W1',
            pixel_size_arcsec=1.375,
            image_fwhm_arcsec=5.84,
            vosa_id='WISE/WISE.W1',
            image_download_method='custom',
            wavelength_eff_angstrom=33526.0,
            wavelength_min_angstrom=27540.97,
            wavelength_max_angstrom=38723.88,
            vega_zero_point_jansky=309.54,
            ab_offset=2.699,
            magnitude_zero_point=20.5,
            image_pixel_units='counts/sec',
            kcorrect_name='wise_w1',
        ),
        Filter(
            name='WISE_W2',
            survey=Survey.objects.get(name__exact='WISE'),
            sedpy_id='wise_w2',
            hips_id='CDS/P/allWISE/W2',
            pixel_size_arcsec=1.375,
            image_fwhm_arcsec=6.48,
            vosa_id='WISE/WISE.W2',
            image_download_method='custom',
            wavelength_eff_angstrom=46028.0,
            wavelength_min_angstrom=39633.26,
            wavelength_max_angstrom=53413.6,
            vega_zero_point_jansky=171.79,
            ab_offset=3.339,
            magnitude_zero_point=19.5,
            image_pixel_units='counts/sec',
            kcorrect_name='wise_w2',
        ),
        Filter(
            name='WISE_W3',
            survey=Survey.objects.get(name__exact='WISE'),
            sedpy_id='wise_w3',
            hips_id='CDS/P/allWISE/W3',
            pixel_size_arcsec=1.375,
            image_fwhm_arcsec=6.72,
            vosa_id='WISE/WISE.W3',
            image_download_method='custom',
            wavelength_eff_angstrom=115608.0,
            wavelength_min_angstrom=74430.44,
            wavelength_max_angstrom=172613.43,
            vega_zero_point_jansky=31.67,
            ab_offset=5.174,
            magnitude_zero_point=18.0,
            image_pixel_units='counts/sec',
            kcorrect_name='wise_w3',
        ),
        Filter(
            name='WISE_W4',
            survey=Survey.objects.get(name__exact='WISE'),
            sedpy_id='wise_w4',
            hips_id='CDS/P/allWISE/W4',
            pixel_size_arcsec=1.375,
            image_fwhm_arcsec=11.82,
            vosa_id='WISE/WISE.W4',
            image_download_method='custom',
            wavelength_eff_angstrom=220883.0,
            wavelength_min_angstrom=195200.83,
            wavelength_max_angstrom=279107.24,
            vega_zero_point_jansky=8.36,
            ab_offset=6.62,
            magnitude_zero_point=13.0,
            image_pixel_units='counts/sec',
            kcorrect_name='wise_w4',
        ),
        Filter(
            name='GALEX_NUV',
            survey=Survey.objects.get(name__exact='GALEX'),
            sedpy_id='galex_nuv',
            hips_id='CDS/P/GALEXGR6/AIS/NUV',
            pixel_size_arcsec=1.5,
            image_fwhm_arcsec=5.3,
            vosa_id='GALEX/GALEX.NUV',
            image_download_method='custom',
            wavelength_eff_angstrom=2304.74,
            wavelength_min_angstrom=1692.52,
            wavelength_max_angstrom=3006.67,
            vega_zero_point_jansky=788.55,
            ab_offset=0,
            magnitude_zero_point=20.08,
            image_pixel_units='counts/sec',
            kcorrect_name='galex_NUV',
        ),
        Filter(
            name='GALEX_FUV',
            survey=Survey.objects.get(name__exact='GALEX'),
            sedpy_id='galex_fuv',
            hips_id='CDS/P/GALEXGR6/AIS/FUV',
            pixel_size_arcsec=1.5,
            image_fwhm_arcsec=4.2,
            vosa_id='GALEX/GALEX.FUV',
            image_download_method='custom',
            wavelength_eff_angstrom=1549.02,
            wavelength_min_angstrom=1340.32,
            wavelength_max_angstrom=1806.43,
            vega_zero_point_jansky=520.73,
            ab_offset=0,
            magnitude_zero_point=18.82,
            image_pixel_units='counts/sec',
            kcorrect_name='galex_FUV',
        ),
        Filter(
            name='PanSTARRS_g',
            survey=Survey.objects.get(name__exact='PanSTARRS'),
            sedpy_id='panstarrs_g',
            hips_id='CDS/P/PanSTARRS/DR1/g',
            pixel_size_arcsec=0.25,
            image_fwhm_arcsec=1.31,
            vosa_id='PAN-STARRS/PS1.g',
            image_download_method='custom',
            wavelength_eff_angstrom=4810.88,
            wavelength_min_angstrom=3943.4,
            wavelength_max_angstrom=5593.27,
            vega_zero_point_jansky=3893.0,
            ab_offset=0,
            magnitude_zero_point=25.0,
            image_pixel_units='counts',
            kcorrect_name='none',
        ),
        Filter(
            name='PanSTARRS_r',
            survey=Survey.objects.get(name__exact='PanSTARRS'),
            sedpy_id='panstarrs_r',
            hips_id='CDS/P/PanSTARRS/DR1/r',
            pixel_size_arcsec=0.25,
            image_fwhm_arcsec=1.19,
            vosa_id='PAN-STARRS/PS1.r',
            image_download_method='custom',
            wavelength_eff_angstrom=6156.36,
            wavelength_min_angstrom=5386.23,
            wavelength_max_angstrom=7035.65,
            vega_zero_point_jansky=3135.5,
            ab_offset=0,
            magnitude_zero_point=25.0,
            image_pixel_units='counts',
            kcorrect_name='none',
        ),
        Filter(
            name='PanSTARRS_i',
            survey=Survey.objects.get(name__exact='PanSTARRS'),
            sedpy_id='panstarrs_i',
            hips_id='CDS/P/PanSTARRS/DR1/i',
            pixel_size_arcsec=0.25,
            image_fwhm_arcsec=1.11,
            vosa_id='PAN-STARRS/PS1.i',
            image_download_method='custom',
            wavelength_eff_angstrom=7503.68,
            wavelength_min_angstrom=6778.45,
            wavelength_max_angstrom=8304.37,
            vega_zero_point_jansky=2577.03,
            ab_offset=0,
            magnitude_zero_point=25.0,
            image_pixel_units='counts',
            kcorrect_name='none',
        ),
        Filter(
            name='PanSTARRS_z',
            survey=Survey.objects.get(name__exact='PanSTARRS'),
            sedpy_id='panstarrs_z',
            hips_id='CDS/P/PanSTARRS/DR1/z',
            pixel_size_arcsec=0.25,
            image_fwhm_arcsec=1.07,
            vosa_id='PAN-STARRS/PS1.z',
            image_download_method='custom',
            wavelength_eff_angstrom=8668.56,
            wavelength_min_angstrom=8028.0,
            wavelength_max_angstrom=9346.0,
            vega_zero_point_jansky=2273.05,
            ab_offset=0,
            magnitude_zero_point=25.0,
            image_pixel_units='counts',
            kcorrect_name='none',
        ),
        Filter(
            name='PanSTARRS_y',
            survey=Survey.objects.get(name__exact='PanSTARRS'),
            sedpy_id='panstarrs_y',
            hips_id='CDS/P/PanSTARRS/DR1/y',
            pixel_size_arcsec=0.25,
            image_fwhm_arcsec=1.02,
            vosa_id='PAN-STARRS/PS1.y',
            image_download_method='custom',
            wavelength_eff_angstrom=9613.45,
            wavelength_min_angstrom=9100.5,
            wavelength_max_angstrom=10838.5,
            vega_zero_point_jansky=2203.66,
            ab_offset=0,
            magnitude_zero_point=25.0,
            image_pixel_units='counts',
            kcorrect_name='none',
        ),
        Filter(
            name='SDSS_i',
            survey=Survey.objects.get(name__exact='SDSS'),
            sedpy_id='sdss_i',
            hips_id='CDS/P/SDSS9/i',
            pixel_size_arcsec=0.4,
            image_fwhm_arcsec=1.26,
            vosa_id='SLOAN/SDSS.i',
            image_download_method='custom',
            wavelength_eff_angstrom=7470.6,
            wavelength_min_angstrom=6430.0,
            wavelength_max_angstrom=8630.0,
            vega_zero_point_jansky=3971.19,
            ab_offset=0,
            magnitude_zero_point=22.5,
            image_pixel_units='counts/sec',
            kcorrect_name='sdss_i0',
        ),
        Filter(
            name='SDSS_r',
            survey=Survey.objects.get(name__exact='SDSS'),
            sedpy_id='sdss_r',
            hips_id='CDS/P/SDSS9/r',
            pixel_size_arcsec=0.4,
            image_fwhm_arcsec=1.32,
            vosa_id='SLOAN/SDSS.r',
            image_download_method='custom',
            wavelength_eff_angstrom=6141.12,
            wavelength_min_angstrom=5415.34,
            wavelength_max_angstrom=6989.14,
            vega_zero_point_jansky=3142.02,
            ab_offset=0,
            magnitude_zero_point=22.5,
            image_pixel_units='counts/sec',
            kcorrect_name='sdss_r0',
        ),
        Filter(
            name='SDSS_u',
            survey=Survey.objects.get(name__exact='SDSS'),
            sedpy_id='sdss_u',
            hips_id='CDS/P/SDSS9/u',
            pixel_size_arcsec=0.4,
            image_fwhm_arcsec=1.53,
            vosa_id='SLOAN/SDSS.u',
            image_download_method='custom',
            wavelength_eff_angstrom=3608.04,
            wavelength_min_angstrom=3048.28,
            wavelength_max_angstrom=4028.23,
            vega_zero_point_jansky=1628.72,
            ab_offset=0,
            magnitude_zero_point=22.5,
            image_pixel_units='counts/sec',
            kcorrect_name='sdss_u0',
        ),
        Filter(
            name='SDSS_z',
            survey=Survey.objects.get(name__exact='SDSS'),
            sedpy_id='sdss_z',
            hips_id='CDS/P/SDSS9/z',
            pixel_size_arcsec=0.4,
            image_fwhm_arcsec=1.29,
            vosa_id='SLOAN/SDSS.z',
            image_download_method='custom',
            wavelength_eff_angstrom=8922.78,
            wavelength_min_angstrom=7960.44,
            wavelength_max_angstrom=10833.25,
            vega_zero_point_jansky=2227.03,
            ab_offset=0,
            magnitude_zero_point=22.5,
            image_pixel_units='counts/sec',
            kcorrect_name='sdss_z0',
        ),
        Filter(
            name='SDSS_g',
            survey=Survey.objects.get(name__exact='SDSS'),
            sedpy_id='sdss_g',
            hips_id='CDS/P/SDSS9/g',
            pixel_size_arcsec=0.4,
            image_fwhm_arcsec=1.44,
            vosa_id='SLOAN/SDSS.g',
            image_download_method='custom',
            wavelength_eff_angstrom=4671.78,
            wavelength_min_angstrom=3797.64,
            wavelength_max_angstrom=5553.04,
            vega_zero_point_jansky=4023.57,
            ab_offset=0,
            magnitude_zero_point=22.5,
            image_pixel_units='counts/sec',
            kcorrect_name='sdss_g0',
        ),
        Filter(
            name='DES_g',
            survey=Survey.objects.get(name__exact='DES'),
            sedpy_id='des_g',
            hips_id='CDS/P/DES-DR1/g',
            pixel_size_arcsec=0.2637,
            image_fwhm_arcsec=1.16,
            vosa_id='CTIO/DECam.g',
            image_download_method='custom',
            wavelength_eff_angstrom=4770.83,
            wavelength_min_angstrom=3925.42,
            wavelength_max_angstrom=5529.96,
            vega_zero_point_jansky=3905.01,
            ab_offset=0,
            magnitude_zero_point=22.5,
            image_pixel_units='counts/sec',
            kcorrect_name='decam_g',
        ),
        Filter(
            name='DES_r',
            survey=Survey.objects.get(name__exact='DES'),
            sedpy_id='des_r',
            hips_id='CDS/P/DES-DR1/r',
            pixel_size_arcsec=0.2637,
            image_fwhm_arcsec=1.07,
            vosa_id='CTIO/DECam.r',
            image_download_method='custom',
            wavelength_eff_angstrom=6371.33,
            wavelength_min_angstrom=5519.97,
            wavelength_max_angstrom=7233.72,
            vega_zero_point_jansky=3027.32,
            ab_offset=0,
            magnitude_zero_point=22.5,
            image_pixel_units='counts/sec',
            kcorrect_name='decam_r',
        ),
        Filter(
            name='DES_i',
            survey=Survey.objects.get(name__exact='DES'),
            sedpy_id='des_i',
            hips_id='CDS/P/DES-DR1/i',
            pixel_size_arcsec=0.2637,
            image_fwhm_arcsec=0.97,
            vosa_id='CTIO/DECam.i',
            image_download_method='custom',
            wavelength_eff_angstrom=7774.19,
            wavelength_min_angstrom=6948.18,
            wavelength_max_angstrom=8645.68,
            vega_zero_point_jansky=2467.82,
            ab_offset=0,
            magnitude_zero_point=22.5,
            image_pixel_units='counts/sec',
            kcorrect_name='decam_i',
        ),
        Filter(
            name='DES_z',
            survey=Survey.objects.get(name__exact='DES'),
            sedpy_id='des_z',
            hips_id='CDS/P/DES-DR1/z',
            pixel_size_arcsec=0.2637,
            image_fwhm_arcsec=0.93,
            vosa_id='CTIO/DECam.z',
            image_download_method='custom',
            wavelength_eff_angstrom=9157.9,
            wavelength_min_angstrom=8341.2,
            wavelength_max_angstrom=10074.26,
            vega_zero_point_jansky=2247.33,
            ab_offset=0,
            magnitude_zero_point=22.5,
            image_pixel_units='counts/sec',
            kcorrect_name='decam_z',
        ),
        Filter(
            name='DES_Y',
            survey=Survey.objects.get(name__exact='DES'),
            sedpy_id='des_y',
            hips_id='CDS/P/DES-DR1/Y',
            pixel_size_arcsec=0.2637,
            image_fwhm_arcsec=0.91,
            vosa_id='CTIO/DECam.y',
            image_download_method='custom',
            wavelength_eff_angstrom=9886.35,
            wavelength_min_angstrom=9364.77,
            wavelength_max_angstrom=10685.78,
            vega_zero_point_jansky=2146.18,
            ab_offset=0,
            magnitude_zero_point=22.5,
            image_pixel_units='counts/sec',
            kcorrect_name='decam_Y',
        ),
    ]:
        obj.save()


def load_survey(apps, schema_editor):
    Survey = apps.get_model("host", "Survey")
    for obj in [
        Survey(
            name='2MASS'
        ),
        Survey(
            name='WISE'
        ),
        Survey(
            name='GALEX'
        ),
        Survey(
            name='PanSTARRS'
        ),
        Survey(
            name='SDSS'
        ),
        Survey(
            name='DES'
        ),
    ]:
        obj.save()


def load_status(apps, schema_editor):
    Status = apps.get_model("host", "Status")
    for obj in [
        Status(
            message='not processed',
            type='blank',
        ),
        Status(
            message='processed',
            type='success',
        ),
        Status(
            message='processing',
            type='warning',
        ),
        Status(
            message='no GHOST match',
            type='error',
        ),
        Status(
            message='failed',
            type='error',
        ),
        Status(
            message='no host redshift',
            type='error',
        ),
        Status(
            message='no transient MWEBV',
            type='error',
        ),
        Status(
            message='no host MWEBV',
            type='error',
        ),
        Status(
            message='phot valid failed',
            type='error',
        ),
        Status(
            message='not enough filters',
            type='error',
        ),
        Status(
            message='time limit exceeded',
            type='error',
        ),
        Status(
            message='blocked',
            type='error',
        ),
        Status(
            message='redshift too high',
            type='error',
        ),
        Status(
            message='no valid phot',
            type='error',
        ),
        Status(
            message='no host',
            type='error',
        ),
    ]:
        obj.save()


def load_taskregistersnapshot(apps, schema_editor):
    TaskRegisterSnapshot = apps.get_model("host", "TaskRegisterSnapshot")
    for obj in [
        TaskRegisterSnapshot(
            time='2010-03-05 00:00:00+00:00',
            number_of_transients=2,
            aggregate_type='not completed',
        ),
        TaskRegisterSnapshot(
            time='2010-03-05 00:00:00+00:00',
            number_of_transients=0,
            aggregate_type='waiting',
        ),
        TaskRegisterSnapshot(
            time='2010-03-05 00:00:00+00:00',
            number_of_transients=1,
            aggregate_type='completed',
        ),
        TaskRegisterSnapshot(
            time='2010-03-05 00:00:00+00:00',
            number_of_transients=3,
            aggregate_type='total',
        ),
    ]:
        obj.save()


def load_apertures(apps, schema_editor):
    Aperture = apps.get_model("host", "Aperture")
    Cutout = apps.get_model("host", "Cutout")
    Transient = apps.get_model("host", "Transient")
    for obj in [
        Aperture(
            name='2010H_PanSTARRS_g_global',
            cutout=Cutout.objects.get(name__exact='2010H_PanSTARRS_g'),
            transient=Transient.objects.get(name__exact='2010H'),
            orientation_deg=227.8,
            ra_deg=121.6004583,
            dec_deg=1.0359861,
            semi_major_axis_arcsec=38.33451152763058,
            semi_minor_axis_arcsec=18.809674824389276,
            type='global',
        ),
        Aperture(
            name='2010H_local',
            cutout=Cutout.objects.get(name__exact='2010H_PanSTARRS_g'),
            transient=Transient.objects.get(name__exact='2010H'),
            orientation_deg=0.0,
            ra_deg=121.6015,
            dec_deg=1.03586,
            semi_major_axis_arcsec=1.0,
            semi_minor_axis_arcsec=1.0,
            type='local',
        ),
    ]:
        obj.save()


def load_cutouts(apps, schema_editor):
    Cutout = apps.get_model("host", "Cutout")
    Transient = apps.get_model("host", "Transient")
    Filter = apps.get_model("host", "Filter")
    for obj in [
        Cutout(
            name='2010ag_PanSTARRS_g',
            filter=Filter.objects.get(name__exact='PanSTARRS_g'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/PanSTARRS/PanSTARRS_g.fits',
        ),
        Cutout(
            name='2010ag_PanSTARRS_r',
            filter=Filter.objects.get(name__exact='PanSTARRS_r'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/PanSTARRS/PanSTARRS_r.fits',
        ),
        Cutout(
            name='2010ag_PanSTARRS_i',
            filter=Filter.objects.get(name__exact='PanSTARRS_i'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/PanSTARRS/PanSTARRS_i.fits',
        ),
        Cutout(
            name='2010ag_PanSTARRS_z',
            filter=Filter.objects.get(name__exact='PanSTARRS_z'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/PanSTARRS/PanSTARRS_z.fits',
        ),
        Cutout(
            name='2010ag_PanSTARRS_y',
            filter=Filter.objects.get(name__exact='PanSTARRS_y'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/PanSTARRS/PanSTARRS_y.fits',
        ),
        Cutout(
            name='2010ag_SDSS_u',
            filter=Filter.objects.get(name__exact='SDSS_u'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/SDSS/SDSS_u.fits',
        ),
        Cutout(
            name='2010ag_SDSS_r',
            filter=Filter.objects.get(name__exact='SDSS_r'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/SDSS/SDSS_r.fits',
        ),
        Cutout(
            name='2010ag_SDSS_i',
            filter=Filter.objects.get(name__exact='SDSS_i'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/SDSS/SDSS_i.fits',
        ),
        Cutout(
            name='2010ag_GALEX_NUV',
            filter=Filter.objects.get(name__exact='GALEX_NUV'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/GALEX/GALEX_NUV.fits',
        ),
        Cutout(
            name='2010ag_GALEX_FUV',
            filter=Filter.objects.get(name__exact='GALEX_FUV'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/GALEX/GALEX_FUV.fits',
        ),
        Cutout(
            name='2010ag_2MASS_J',
            filter=Filter.objects.get(name__exact='2MASS_J'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/2MASS/2MASS_J.fits',
        ),
        Cutout(
            name='2010ag_2MASS_H',
            filter=Filter.objects.get(name__exact='2MASS_H'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/2MASS/2MASS_H.fits',
        ),
        Cutout(
            name='2010ag_2MASS_K',
            filter=Filter.objects.get(name__exact='2MASS_K'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/2MASS/2MASS_K.fits',
        ),
        Cutout(
            name='2010ag_WISE_W1',
            filter=Filter.objects.get(name__exact='WISE_W1'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/WISE/WISE_W1.fits',
        ),
        Cutout(
            name='2010ag_WISE_W2',
            filter=Filter.objects.get(name__exact='WISE_W2'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/WISE/WISE_W2.fits',
        ),
        Cutout(
            name='2010ag_WISE_W3',
            filter=Filter.objects.get(name__exact='WISE_W3'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/WISE/WISE_W3.fits',
        ),
        Cutout(
            name='2010ag_WISE_W4',
            filter=Filter.objects.get(name__exact='WISE_W4'),
            transient=Transient.objects.get(name__exact='2010ag'),
            fits='/data/cutout_cdn/2010ag/WISE/WISE_W4.fits',
        ),
        Cutout(
            name='2010ai_PanSTARRS_g',
            filter=Filter.objects.get(name__exact='PanSTARRS_g'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/PanSTARRS/PanSTARRS_g.fits',
        ),
        Cutout(
            name='2010ai_PanSTARRS_r',
            filter=Filter.objects.get(name__exact='PanSTARRS_r'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/PanSTARRS/PanSTARRS_r.fits',
        ),
        Cutout(
            name='2010ai_PanSTARRS_i',
            filter=Filter.objects.get(name__exact='PanSTARRS_i'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/PanSTARRS/PanSTARRS_i.fits',
        ),
        Cutout(
            name='2010ai_PanSTARRS_z',
            filter=Filter.objects.get(name__exact='PanSTARRS_z'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/PanSTARRS/PanSTARRS_z.fits',
        ),
        Cutout(
            name='2010ai_PanSTARRS_y',
            filter=Filter.objects.get(name__exact='PanSTARRS_y'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/PanSTARRS/PanSTARRS_y.fits',
        ),
        Cutout(
            name='2010ai_SDSS_u',
            filter=Filter.objects.get(name__exact='SDSS_u'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/SDSS/SDSS_u.fits',
        ),
        Cutout(
            name='2010ai_SDSS_r',
            filter=Filter.objects.get(name__exact='SDSS_r'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/SDSS/SDSS_r.fits',
        ),
        Cutout(
            name='2010ai_SDSS_i',
            filter=Filter.objects.get(name__exact='SDSS_i'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/SDSS/SDSS_i.fits',
        ),
        Cutout(
            name='2010ai_SDSS_z',
            filter=Filter.objects.get(name__exact='SDSS_z'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/SDSS/SDSS_z.fits',
        ),
        Cutout(
            name='2010ai_GALEX_NUV',
            filter=Filter.objects.get(name__exact='GALEX_NUV'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/GALEX/GALEX_NUV.fits',
        ),
        Cutout(
            name='2010ai_GALEX_FUV',
            filter=Filter.objects.get(name__exact='GALEX_FUV'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/GALEX/GALEX_FUV.fits',
        ),
        Cutout(
            name='2010ai_2MASS_J',
            filter=Filter.objects.get(name__exact='2MASS_J'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/2MASS/2MASS_J.fits',
        ),
        Cutout(
            name='2010ai_2MASS_H',
            filter=Filter.objects.get(name__exact='2MASS_H'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/2MASS/2MASS_H.fits',
        ),
        Cutout(
            name='2010ai_2MASS_K',
            filter=Filter.objects.get(name__exact='2MASS_K'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/2MASS/2MASS_K.fits',
        ),
        Cutout(
            name='2010ai_WISE_W1',
            filter=Filter.objects.get(name__exact='WISE_W1'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/WISE/WISE_W1.fits',
        ),
        Cutout(
            name='2010ai_WISE_W2',
            filter=Filter.objects.get(name__exact='WISE_W2'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/WISE/WISE_W2.fits',
        ),
        Cutout(
            name='2010ai_WISE_W3',
            filter=Filter.objects.get(name__exact='WISE_W3'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/WISE/WISE_W3.fits',
        ),
        Cutout(
            name='2010ai_WISE_W4',
            filter=Filter.objects.get(name__exact='WISE_W4'),
            transient=Transient.objects.get(name__exact='2010ai'),
            fits='/data/cutout_cdn/2010ai/WISE/WISE_W4.fits',
        ),
        Cutout(
            name='2010H_PanSTARRS_g',
            filter=Filter.objects.get(name__exact='PanSTARRS_g'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/PanSTARRS/PanSTARRS_g.fits',
        ),
        Cutout(
            name='2010H_PanSTARRS_r',
            filter=Filter.objects.get(name__exact='PanSTARRS_r'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/PanSTARRS/PanSTARRS_r.fits',
        ),
        Cutout(
            name='2010H_PanSTARRS_i',
            filter=Filter.objects.get(name__exact='PanSTARRS_i'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/PanSTARRS/PanSTARRS_i.fits',
        ),
        Cutout(
            name='2010H_PanSTARRS_z',
            filter=Filter.objects.get(name__exact='PanSTARRS_z'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/PanSTARRS/PanSTARRS_z.fits',
        ),
        Cutout(
            name='2010H_PanSTARRS_y',
            filter=Filter.objects.get(name__exact='PanSTARRS_y'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/PanSTARRS/PanSTARRS_y.fits',
        ),
        Cutout(
            name='2010H_SDSS_u',
            filter=Filter.objects.get(name__exact='SDSS_u'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/SDSS/SDSS_u.fits',
        ),
        Cutout(
            name='2010H_SDSS_r',
            filter=Filter.objects.get(name__exact='SDSS_r'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/SDSS/SDSS_r.fits',
        ),
        Cutout(
            name='2010H_SDSS_i',
            filter=Filter.objects.get(name__exact='SDSS_i'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/SDSS/SDSS_i.fits',
        ),
        Cutout(
            name='2010H_SDSS_z',
            filter=Filter.objects.get(name__exact='SDSS_z'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/SDSS/SDSS_z.fits',
        ),
        Cutout(
            name='2010H_GALEX_NUV',
            filter=Filter.objects.get(name__exact='GALEX_NUV'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/GALEX/GALEX_NUV.fits',
        ),
        Cutout(
            name='2010H_GALEX_FUV',
            filter=Filter.objects.get(name__exact='GALEX_FUV'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/GALEX/GALEX_FUV.fits',
        ),
        Cutout(
            name='2010H_2MASS_J',
            filter=Filter.objects.get(name__exact='2MASS_J'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/2MASS/2MASS_J.fits',
        ),
        Cutout(
            name='2010H_2MASS_H',
            filter=Filter.objects.get(name__exact='2MASS_H'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/2MASS/2MASS_H.fits',
        ),
        Cutout(
            name='2010H_2MASS_K',
            filter=Filter.objects.get(name__exact='2MASS_K'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/2MASS/2MASS_K.fits',
        ),
        Cutout(
            name='2010H_WISE_W1',
            filter=Filter.objects.get(name__exact='WISE_W1'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/WISE/WISE_W1.fits',
        ),
        Cutout(
            name='2010H_WISE_W2',
            filter=Filter.objects.get(name__exact='WISE_W2'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/WISE/WISE_W2.fits',
        ),
        Cutout(
            name='2010H_WISE_W3',
            filter=Filter.objects.get(name__exact='WISE_W3'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/WISE/WISE_W3.fits',
        ),
        Cutout(
            name='2010H_WISE_W4',
            filter=Filter.objects.get(name__exact='WISE_W4'),
            transient=Transient.objects.get(name__exact='2010H'),
            fits='/data/cutout_cdn/2010H/WISE/WISE_W4.fits',
        ),
    ]:
        obj.save()


def load_taskregister(apps, schema_editor):
    TaskRegister = apps.get_model("host", "TaskRegister")
    Transient = apps.get_model("host", "Transient")
    Task = apps.get_model("host", "Task")
    Status = apps.get_model("host", "Status")
    for obj in [
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ag'),
            task=Task.objects.get(name__exact='Transient MWEBV'),
            status=Status.objects.get(message__exact='not processed'),
            last_modified='1999-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=45.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ag'),
            task=Task.objects.get(name__exact='Host match'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=1.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ag'),
            task=Task.objects.get(name__exact='Host MWEBV'),
            status=Status.objects.get(message__exact='not processed'),
            last_modified='1998-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=35.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ag'),
            task=Task.objects.get(name__exact='Cutout download'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=10.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ag'),
            task=Task.objects.get(name__exact='Host information'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=2.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ag'),
            task=Task.objects.get(name__exact='Global aperture photometry'),
            status=Status.objects.get(message__exact='not processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=11.2323,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ag'),
            task=Task.objects.get(name__exact='Local aperture photometry'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=0.03,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ag'),
            task=Task.objects.get(name__exact='Global host SED inference'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=0.004,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ag'),
            task=Task.objects.get(name__exact='Local host SED inference'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=100.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ag'),
            task=Task.objects.get(name__exact='Transient information'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=60.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ai'),
            task=Task.objects.get(name__exact='Transient MWEBV'),
            status=Status.objects.get(message__exact='not processed'),
            last_modified='1999-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=45.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ai'),
            task=Task.objects.get(name__exact='Host match'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=1.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ai'),
            task=Task.objects.get(name__exact='Host MWEBV'),
            status=Status.objects.get(message__exact='not processed'),
            last_modified='1998-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=35.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ai'),
            task=Task.objects.get(name__exact='Cutout download'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=10.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ai'),
            task=Task.objects.get(name__exact='Host information'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=2.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ai'),
            task=Task.objects.get(name__exact='Global aperture photometry'),
            status=Status.objects.get(message__exact='not processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=11.2323,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ai'),
            task=Task.objects.get(name__exact='Local aperture photometry'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=0.03,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ai'),
            task=Task.objects.get(name__exact='Global host SED inference'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=0.004,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ai'),
            task=Task.objects.get(name__exact='Local host SED inference'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=100.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010ai'),
            task=Task.objects.get(name__exact='Transient information'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=50.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010H'),
            task=Task.objects.get(name__exact='Transient MWEBV'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='1999-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=45.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010H'),
            task=Task.objects.get(name__exact='Host match'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=1.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010H'),
            task=Task.objects.get(name__exact='Host MWEBV'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='1998-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=35.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010H'),
            task=Task.objects.get(name__exact='Cutout download'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=10.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010H'),
            task=Task.objects.get(name__exact='Host information'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=2.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010H'),
            task=Task.objects.get(name__exact='Global aperture photometry'),
            status=Status.objects.get(message__exact='not processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=11.2323,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010H'),
            task=Task.objects.get(name__exact='Validate global photometry'),
            status=Status.objects.get(message__exact='not processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=11.2323,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010H'),
            task=Task.objects.get(name__exact='Validate local photometry'),
            status=Status.objects.get(message__exact='not processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=11.2323,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010H'),
            task=Task.objects.get(name__exact='Global aperture construction'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=11.2323,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010H'),
            task=Task.objects.get(name__exact='Local aperture photometry'),
            status=Status.objects.get(message__exact='not processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=0.03,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010H'),
            task=Task.objects.get(name__exact='Global host SED inference'),
            status=Status.objects.get(message__exact='not processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=0.004,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010H'),
            task=Task.objects.get(name__exact='Local host SED inference'),
            status=Status.objects.get(message__exact='not processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=100.0,
        ),
        TaskRegister(
            transient=Transient.objects.get(name__exact='2010H'),
            task=Task.objects.get(name__exact='Transient information'),
            status=Status.objects.get(message__exact='processed'),
            last_modified='2000-01-23 01:23:45.678000+00:00',
            last_processing_time_seconds=50.0,
        ),
    ]:
        obj.save()


def load_hosts(apps, schema_editor):
    Host = apps.get_model("host", "Host")
    hosts = [
        Host(
            name='UGC 10679',
            redshift=0.03369,
            ra_deg=255.971,
            dec_deg=31.4990417,
        ),
        Host(
            name='IC 494',
            redshift=0.015355,
            ra_deg=121.6004583,
            dec_deg=1.0359861,
            milkyway_dust_reddening=0.026,
        ),
    ]
    for host in hosts:
        host.save()


def load_transients(apps, schema_editor):
    Host = apps.get_model("host", "Host")
    Transient = apps.get_model("host", "Transient")
    transients = [
        Transient(
            name='2010ag',
            tns_id=1,
            public_timestamp='2010-03-05 00:00:00+00:00',
            tns_prefix='SN',
            ra_deg=255.97346,
            dec_deg=31.50172,
            tasks_initialized=True,
            spectroscopic_class='SN Ia',
            host=Host.objects.get(name__exact='UGC 10679'),
        ),
        Transient(
            name='2010ai',
            tns_id=2,
            public_timestamp='2010-03-08 00:00:00+00:00',
            tns_prefix='SN',
            ra_deg=194.85012,
            dec_deg=27.99642,
            tasks_initialized=True,
            spectroscopic_class='SN Ia',
        ),
        Transient(
            name='2010H',
            tns_id=3,
            public_timestamp='2010-01-16 00:00:00+00:00',
            tns_prefix='SN',
            ra_deg=121.6015,
            dec_deg=1.03586,
            host=Host.objects.get(name__exact='IC 494'),
            spectroscopic_class='SN Ia',
            milkyway_dust_reddening=0.026,
            tasks_initialized=True,
        ),
    ]
    for transient in transients:
        transient.save()


class Migration(migrations.Migration):

    dependencies = [
        ('host', '0023_alter_transient_name'),
    ]

    operations = [
        migrations.RunPython(load_acknowledgement),
        migrations.RunPython(load_status),
        migrations.RunPython(load_survey),
        migrations.RunPython(load_filter),
        migrations.RunPython(load_catalog),
        migrations.RunPython(load_catalogphotometry),
        migrations.RunPython(load_tasks),
        migrations.RunPython(load_hosts),
        migrations.RunPython(load_transients),
        migrations.RunPython(load_taskregister),
        migrations.RunPython(load_taskregistersnapshot),
        migrations.RunPython(load_cutouts),
        migrations.RunPython(load_apertures),
    ]
