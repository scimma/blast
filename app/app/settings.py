"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

APP_VERSION = '1.5.5'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

SECRET_KEY = os.environ.get(
    "SECRET_KEY", "django-insecure-tn6@rg(#694!6p^c!^0ekz5d)jyxk(dxtx-z9m2%$h&w$p0#+)"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "false").lower() == "true"
SILKY_PYTHON_PROFILER = (
    os.environ.get("SILKY_PYTHON_PROFILER", "false").lower() == "true"
)
SILKY_INTERCEPT_PERCENT = int(os.environ.get("SILKY_INTERCEPT_PERCENT", "0"))


HOSTNAMES = os.environ.get("DJANGO_HOSTNAMES", "localhost").split(",")
ALLOWED_HOSTS = ["*"]
CORS_ORIGIN_WHITELIST = ["*"]
CSRF_TRUSTED_ORIGINS = ["http://localhost", "http://localhost:8000", "http://localhost:4000"]
for hostname in HOSTNAMES:
    CSRF_TRUSTED_ORIGINS.append(f"""https://{hostname}""")
CSRF_COOKIE_SECURE = True

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "host",
    "crispy_forms",
    "django_tables2",
    "bootstrap4",
    "crispy_bootstrap4",
    "django_celery_beat",
    "revproxy",
    "rest_framework",
    "api",
    "users",
    "django_cron",
    "django_filters",
    'django_celery_results',
    'mozilla_django_oidc',
    "silk",  # Django Silk profiler (https://github.com/jazzband/django-silk),
    "latexify",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "silk.middleware.SilkyMiddleware",  # Django Silk profiler (https://github.com/jazzband/django-silk)
]

ROOT_URLCONF = "app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "host", "templates", "host"),
            os.path.join(BASE_DIR, "users", "templates", "registration"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "users.context_processors.user_profile",
            ]
        },
    }
]

WSGI_APPLICATION = "app.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.environ.get("MYSQL_DATABASE", "blast_db"),
        "USER": os.environ.get("MYSQL_USER", ""),
        "PASSWORD": os.environ.get("MYSQL_ROOT_PASSWORD", "password"),
        "HOST": os.environ.get("DATABASE_HOST", "database"),
        "PORT": os.environ.get("DATABASE_PORT", "3306"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'app.auth_backend.CustomOIDCAuthenticationBackend',
)


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), "app/static/")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


MEDIA_URL = "/cutouts/"
MEDIA_ROOT = os.path.join(os.path.dirname(BASE_DIR), "data")

DUSTMAPS_DATA_ROOT = os.environ.get("DUSTMAPS_DATA_ROOT", "/data/dustmaps")
CUTOUT_ROOT = os.environ.get("CUTOUT_ROOT", "/data/cutout_cdn")
SED_OUTPUT_ROOT = os.environ.get("SED_OUTPUT_ROOT", "/data/sed_output")
SBI_TRAINING_ROOT = os.environ.get("SBI_TRAINING_ROOT", "/data/sbi_training_sets")
PROST_OUTPUT_ROOT = os.environ.get("PROST_OUTPUT_ROOT", "/tmp/prost_output")
TNS_STAGING_ROOT = os.environ.get("TNS_STAGING_ROOT", "/data/tns_staging")
TNS_INGEST_TIMEOUT = int(os.environ.get("TNS_INGEST_TIMEOUT", "120"))
TNS_QUERY_TIMEOUT = int(os.environ.get("TNS_QUERY_TIMEOUT", "60"))
TNS_SIMULATE = os.environ.get("TNS_SIMULATE", "false").lower() in ["true", "t", "1"]
SBIPP_ROOT = os.environ.get("SBIPP_ROOT", "/data/sbipp")
SBIPP_PHOT_ROOT = os.environ.get("SBIPP_PHOT_ROOT", "/data/sbipp_phot")
TRANSMISSION_CURVES_ROOT = os.environ.get("TRANSMISSION_CURVES_ROOT", "/data/transmission")

CUTOUT_OVERWRITE = os.environ.get("CUTOUT_OVERWRITE", "False")

# S3_ENDPOINT_URL example: "https://js2.jetstream-cloud.org:8001"
S3_ENDPOINT_URL = os.getenv("S3_ENDPOINT_URL", "")
S3_BUCKET = os.getenv("S3_BUCKET", "")
S3_BASE_PATH = os.getenv("S3_BASE_PATH", "")
S3_LOGS_PATH = os.getenv("S3_LOGS_PATH", "")

USAGE_METRICS_LOGS_PER_ARCHIVE = int(os.getenv('USAGE_METRICS_LOGS_PER_ARCHIVE', '1000'))
USAGE_METRICS_IGNORE_REQUESTS = [
    {
        'path': '/transient_uploads/',
        'method': 'GET',
    },
]

CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_TIMEZONE = "UTC"

CELERY_IMPORTS = [
    "host.tasks",
    "host.system_tasks",
    "host.transient_tasks",
]

rabbitmq_user = os.environ.get("RABBITMQ_USERNAME", "guest")
rabbitmq_password = os.environ.get("RABBITMQ_PASSWORD", "guest")
rabbitmq_host = os.environ.get("MESSAGE_BROKER_HOST", "rabbitmq")
rabbitmq_port = os.environ.get("MESSAGE_BROKER_PORT", "5672")

CELERY_BROKER_URL = (
    f"amqp://{rabbitmq_user}:{rabbitmq_password}@{rabbitmq_host}:{rabbitmq_port}//"
)

# ref: https://docs.celeryq.dev/en/stable/django/first-steps-with-django.html#django-celery-results-using-the-django-orm-cache-as-a-result-backend  # noqa
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'default'

CELERYD_REDIRECT_STDOUTS_LEVEL = "INFO"
CRISPY_TEMPLATE_PACK = "bootstrap4"

CELERY_TASK_ROUTES = {
    'Global Host SED Fitting': {'queue': 'sed'},
    'Local Host SED Fitting': {'queue': 'sed'},
}

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        f'rest_framework.permissions.{os.environ.get("API_AUTHENTICATION")}',
    ],
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}

# Configure the OIDC client
OIDC_RP_CLIENT_ID = os.environ.get("OIDC_CLIENT_ID", "")
OIDC_RP_CLIENT_SECRET = os.environ.get("OIDC_CLIENT_SECRET", "")
OIDC_RP_SCOPES = "openid profile email"
OIDC_OP_AUTHORIZATION_ENDPOINT = os.environ.get('OIDC_OP_AUTHORIZATION_ENDPOINT', '')
OIDC_OP_TOKEN_ENDPOINT = os.environ.get('OIDC_OP_TOKEN_ENDPOINT', '')
OIDC_OP_USER_ENDPOINT = os.environ.get('OIDC_OP_USER_ENDPOINT', '')

# Required for keycloak
OIDC_RP_SIGN_ALGO = os.environ.get('OIDC_RP_SIGN_ALGO', 'RS256')
OIDC_OP_JWKS_ENDPOINT = os.environ.get('OIDC_OP_JWKS_ENDPOINT', '')


OIDC_OP_LOGOUT_URL_METHOD = "app.auth_backend.execute_logout"
# OIDC_USERNAME_ALGO = 'app_base.auth_backends.generate_username'

LOGIN_URL = '/oidc/authenticate'
LOGIN_REDIRECT_URL = "/transient_uploads"
LOGOUT_REDIRECT_URL = os.environ.get('OIDC_OP_LOGOUT_ENDPOINT', '/')

# Email for support requests
SUPPORT_EMAIL = os.getenv('SUPPORT_EMAIL', "devnull@example.com")

# ALLOW_LOGOUT_GET_METHOD tells mozilla-django-oidc that the front end can logout with a GET
# which allows the front end to use location.href to /auth/logout to logout.
ALLOW_LOGOUT_GET_METHOD = True

# Our django backend is deployed behind nginx/guncorn. By default Django ignores
# the X-FORWARDED request headers generated. mozilla-django-oidc calls
# Django's request.build_absolute_uri method in such a way that the https
# request produces an http redirect_uri. So, we need to tell Django not to ignore
# the X-FORWARDED header and the protocol to use:
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# logging for mozilla oidc
LOGGING = {
    'version': 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    'loggers': {
        'mozilla_django_oidc': {
            'handlers': ['console'],
            'level': 'INFO'
        },
    }
}

SILKY_PYTHON_PROFILER = (os.environ.get("SILKY_PYTHON_PROFILER", "false").lower() == "true")
